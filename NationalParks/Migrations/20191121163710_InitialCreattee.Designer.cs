// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NationalParks.DataAccess;

namespace NationalParks.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191121163710_InitialCreattee")]
    partial class InitialCreattee
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NationalParks.Models.Accessibility", b =>
                {
                    b.Property<string>("cellphoneinfo")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("adainfo");

                    b.Property<string>("additionalinfo");

                    b.Property<string>("firestovepolicy");

                    b.Property<string>("id");

                    b.Property<string>("internetinfo");

                    b.Property<string>("rvallowed");

                    b.Property<string>("rvinfo");

                    b.Property<string>("rvmaxlength");

                    b.Property<string>("trailerallowed");

                    b.Property<string>("trailermaxlength");

                    b.Property<string>("wheelchairaccess");

                    b.HasKey("cellphoneinfo");

                    b.HasIndex("id")
                        .IsUnique()
                        .HasFilter("[id] IS NOT NULL");

                    b.ToTable("Accessibilityy");
                });

            modelBuilder.Entity("NationalParks.Models.Amenities", b =>
                {
                    b.Property<string>("internetconnectivity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("amphitheater");

                    b.Property<string>("ampitheater");

                    b.Property<string>("campstore");

                    b.Property<string>("cellphonereception");

                    b.Property<string>("dumpstation");

                    b.Property<string>("firewoodforsale");

                    b.Property<string>("foodstoragelockers");

                    b.Property<string>("iceavailableforsale");

                    b.Property<string>("id");

                    b.Property<string>("laundry");

                    b.Property<string>("stafforvolunteerhostonsite");

                    b.Property<string>("trashrecyclingcollection");

                    b.HasKey("internetconnectivity");

                    b.ToTable("Amenity");
                });

            modelBuilder.Entity("NationalParks.Models.Campsites", b =>
                {
                    b.Property<string>("group")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("electricalhookups");

                    b.Property<string>("horse");

                    b.Property<string>("id");

                    b.Property<string>("other");

                    b.Property<string>("rvonly");

                    b.Property<string>("tentonly");

                    b.Property<string>("totalsites");

                    b.Property<string>("walkboatto");

                    b.HasKey("group");

                    b.HasIndex("id")
                        .IsUnique()
                        .HasFilter("[id] IS NOT NULL");

                    b.ToTable("Campsite");
                });

            modelBuilder.Entity("NationalParks.Models.Datum", b =>
                {
                    b.Property<string>("parkCode")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("amenitiesinternetconnectivity");

                    b.Property<string>("description");

                    b.Property<string>("directionsUrl");

                    b.Property<string>("directionsoverview");

                    b.Property<string>("id");

                    b.Property<string>("latLong");

                    b.Property<string>("name");

                    b.Property<string>("regulationsoverview");

                    b.Property<string>("regulationsurl");

                    b.Property<string>("reservationsdescription");

                    b.Property<string>("reservationssitesfirstcome");

                    b.Property<string>("reservationssitesreservable");

                    b.Property<string>("reservationsurl");

                    b.Property<string>("weatheroverview");

                    b.HasKey("parkCode");

                    b.HasIndex("amenitiesinternetconnectivity");

                    b.ToTable("RootObject");
                });

            modelBuilder.Entity("NationalParks.Models.Park", b =>
                {
                    b.Property<string>("parkCode")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("description");

                    b.Property<string>("designation");

                    b.Property<string>("directionsInfo");

                    b.Property<string>("directionsUrl");

                    b.Property<string>("fullName");

                    b.Property<string>("id");

                    b.Property<string>("latLong");

                    b.Property<string>("name");

                    b.Property<string>("states");

                    b.Property<string>("url");

                    b.Property<string>("weatherInfo");

                    b.HasKey("parkCode");

                    b.ToTable("Parks");
                });

            modelBuilder.Entity("NationalParks.Models.Accessibility", b =>
                {
                    b.HasOne("NationalParks.Models.Datum", "Datum")
                        .WithOne("accessibility")
                        .HasForeignKey("NationalParks.Models.Accessibility", "id");
                });

            modelBuilder.Entity("NationalParks.Models.Campsites", b =>
                {
                    b.HasOne("NationalParks.Models.Datum", "Datum")
                        .WithOne("campsites")
                        .HasForeignKey("NationalParks.Models.Campsites", "id");
                });

            modelBuilder.Entity("NationalParks.Models.Datum", b =>
                {
                    b.HasOne("NationalParks.Models.Amenities", "amenities")
                        .WithMany()
                        .HasForeignKey("amenitiesinternetconnectivity");
                });
#pragma warning restore 612, 618
        }
    }
}
